{"version":3,"sources":["utils/date.ts","components/CommentLikeBlock/CommentLikeBlock.styles.ts","components/CommentLikeBlock/CommentLikeBlock.tsx","components/Timeline/TimelineItem.styles.ts","components/Timeline/TimelineItem.tsx","components/Timeline/InitialItem.tsx","components/Timeline/Timeline.styles.ts","components/Timeline/Timeline.tsx","../node_modules/@material-ui/core/esm/Link/Link.js","../node_modules/@material-ui/icons/esm/OpenInNew.js","components/LinkOpen/LinkOpen.styles.ts","components/LinkOpen/LinkOpen.tsx","routes/Experience/ExperienceTimelineItem.tsx","routes/Experience/Experience.styles.ts","routes/Experience/Experience.tsx"],"names":["formatIntervalShort","start","end","format","duration","intervalToDuration","formatDuration","formatInterval","replace","formatMonthsAsIntervalShort","months","Date","addMonths","useStyles","makeStyles","theme","createStyles","commentLikeBlock","fontFamily","color","fontSize","typography","body1","maxWidth","position","slash","palette","text","secondary","line","top","bottom","left","width","backgroundColor","childrenWrapper","paddingLeft","CommentLikeBlock","props","classes","className","clsx","title","children","timelineItem","flex","padding","initialItem","dot","borderColor","primary","main","light","connector","content","paddingTop","paddingRight","paddingBottom","spacing","lineHeight","marginBottom","subtitle","fontWeight","timeDiff","description","height","TimelineItem","React","memo","TimelineSeparator","TimelineDot","variant","TimelineConnector","TimelineContent","Typography","dateFrom","dateTo","descriptionTitle","InitialItem","timeline","breakpoints","down","Timeline","Link","ref","_props$color","_props$component","component","onBlur","onFocus","TypographyClasses","_props$underline","underline","_props$variant","other","_objectWithoutProperties","_useIsFocusVisible","useIsFocusVisible","isFocusVisible","onBlurVisible","focusVisibleRef","_React$useState","focusVisible","setFocusVisible","handlerRef","useForkRef","_extends","root","concat","capitalize","button","event","withStyles","underlineNone","textDecoration","underlineHover","underlineAlways","WebkitTapHighlightColor","outline","border","margin","borderRadius","cursor","userSelect","verticalAlign","borderStyle","name","createSvgIcon","createElement","d","linkOpen","whiteSpace","display","icon","marginLeft","LinkOpen","hasLinkIcon","OpenInNew","external","href","to","target","rel","ExperienceTimelineItem","company","link","Experience","EXPERIENCE","map","exp","key","id"],"mappings":"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","file":"static/js/5.7531844a.chunk.js","sourcesContent":["import { formatDuration, intervalToDuration, addMonths } from \"date-fns\";\n\nexport const formatInterval = ({\n  start,\n  end,\n  format = [\"years\", \"months\"],\n}: {\n  start: Date;\n  end: Date;\n  format?: string[];\n}) => {\n  const duration = intervalToDuration({ start, end });\n  return formatDuration(duration, { format });\n};\n\nexport const formatIntervalShort = ({\n  start,\n  end,\n}: {\n  start: Date;\n  end: Date;\n}) => {\n  return formatInterval({ start, end })\n    .replace(\"year\", \"yr\")\n    .replace(\"month\", \"mo\");\n};\n\nexport const formatMonthsAsIntervalShort = (months: number) => {\n  return formatIntervalShort({\n    start: new Date(0),\n    end: addMonths(new Date(0), months),\n  });\n};\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    commentLikeBlock: {\n      fontFamily: \"IBM Plex Mono\",\n      color: \"#a9b7c6\",\n      fontSize: theme.typography.body1.fontSize,\n      maxWidth: \"800px\",\n      position: \"relative\",\n    },\n    slash: {\n      color: theme.palette.text.secondary,\n    },\n    line: {\n      position: \"absolute\",\n      top: \"1.1em\",\n      bottom: \"1.4em\",\n      left: \"0.8em\",\n      width: \"1px\",\n      backgroundColor: theme.palette.text.secondary,\n    },\n    childrenWrapper: {\n      fontSize: \"inherit\",\n      paddingLeft: \"1.5em\",\n    },\n  })\n);\n","import React from \"react\";\nimport clsx from \"clsx\";\n\nimport { useStyles } from \"./CommentLikeBlock.styles\";\n\ninterface CommentLikeBlockProps {\n  className?: string;\n  title?: React.ReactNode;\n}\n\nexport const CommentLikeBlock: React.FC<CommentLikeBlockProps> = (props) => {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.commentLikeBlock, props.className)}>\n      <div className={classes.slash}>\n        /** {props.title} {!props.children && \"*/\"}\n      </div>\n      {props.children && (\n        <>\n          <div className={classes.line} />\n          <div className={classes.childrenWrapper}>{props.children}</div>\n          <div className={classes.slash}>&nbsp;*/</div>\n        </>\n      )}\n    </div>\n  );\n};\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    timelineItem: {\n      \"&::before\": {\n        flex: 0,\n        padding: 0,\n      },\n    },\n    initialItem: {},\n    dot: {\n      \".az-timeline-primary-main &\": {\n        borderColor: theme.palette.primary.main,\n      },\n      \".az-timeline-primary-light &\": {\n        borderColor: theme.palette.primary.light,\n      },\n      \".az-timeline-secondary-main &\": {\n        borderColor: theme.palette.secondary.main,\n      },\n      \".az-timeline-secondary-light &\": {\n        borderColor: theme.palette.secondary.light,\n      },\n      \"$initialItem &\": {\n        \".az-timeline-primary-main &\": {\n          backgroundColor: theme.palette.primary.main,\n        },\n        \".az-timeline-primary-light &\": {\n          backgroundColor: theme.palette.primary.light,\n        },\n        \".az-timeline-secondary-main &\": {\n          backgroundColor: theme.palette.secondary.main,\n        },\n        \".az-timeline-secondary-light &\": {\n          backgroundColor: theme.palette.secondary.light,\n        },\n      },\n    },\n    connector: {\n      \".az-timeline-primary-main &\": {\n        backgroundColor: theme.palette.primary.main,\n      },\n      \".az-timeline-primary-light &\": {\n        backgroundColor: theme.palette.primary.light,\n      },\n      \".az-timeline-secondary-main &\": {\n        backgroundColor: theme.palette.secondary.main,\n      },\n      \".az-timeline-secondary-light &\": {\n        backgroundColor: theme.palette.secondary.light,\n      },\n    },\n    content: {\n      paddingTop: 0,\n      paddingRight: 0,\n      paddingBottom: theme.spacing(2),\n    },\n    title: {\n      lineHeight: 1,\n      paddingTop: \"0.2em\",\n      marginBottom: \"0.2em\",\n      \"$initialItem &\": {\n        \".az-timeline-primary-main &\": {\n          color: theme.palette.primary.main,\n        },\n        \".az-timeline-primary-light &\": {\n          color: theme.palette.primary.light,\n        },\n        \".az-timeline-secondary-main &\": {\n          color: theme.palette.secondary.main,\n        },\n        \".az-timeline-secondary-light &\": {\n          color: theme.palette.secondary.light,\n        },\n      },\n    },\n    subtitle: {\n      color: \"#fff\",\n      fontWeight: 500,\n    },\n    timeDiff: {\n      color: \"rgba(255,255,255,0.5)\",\n    },\n    description: {\n      fontSize: theme.typography.body1.fontSize,\n      height: \"auto\",\n    },\n  })\n);\n","import { Typography } from \"@material-ui/core\";\nimport {\n  TimelineItem as MuiTimelineItem,\n  TimelineContent,\n  TimelineSeparator,\n  TimelineDot,\n  TimelineConnector,\n} from \"@material-ui/lab\";\nimport React from \"react\";\nimport { format, addMonths } from \"date-fns\";\nimport clsx from \"clsx\";\n\nimport { formatIntervalShort } from \"~/utils/date\";\nimport { CommentLikeBlock } from \"~/components/CommentLikeBlock\";\n\nimport { useStyles } from \"./TimelineItem.styles\";\n\nexport interface TimelineItemProps {\n  classes?: ClassesOverride<typeof useStyles>;\n  children?: React.ReactNode;\n  className?: string;\n  descriptionTitle?: React.ReactNode;\n  dateFrom: Date;\n  dateTo?: Date;\n  subtitle?: React.ReactNode;\n  title: React.ReactNode;\n}\n\nconst TimelineItemBase: React.FC<TimelineItemProps> = (props) => {\n  const classes = useStyles(props);\n  return (\n    <MuiTimelineItem className={clsx(classes.timelineItem, props.className)}>\n      <TimelineSeparator>\n        <TimelineDot className={classes.dot} variant=\"outlined\" />\n        <TimelineConnector className={classes.connector} />\n      </TimelineSeparator>\n\n      <TimelineContent className={classes.content}>\n        <Typography className={classes.title} variant=\"h6\" color=\"primary\">\n          {props.title}\n        </Typography>\n\n        <Typography variant=\"body2\">\n          {format(props.dateFrom, \"MMM yyyy\")}\n          {\" – \"}\n          {props.dateTo ? format(props.dateTo, \"MMM yyyy\") : \"Present\"}\n          <span className={classes.timeDiff}>\n            {\" < \"}\n            {formatIntervalShort({\n              start: props.dateFrom,\n              end: addMonths(props.dateTo || new Date(), 1),\n            })}\n            {\" >\"}\n          </span>\n        </Typography>\n\n        {props.subtitle && (\n          <Typography className={classes.subtitle} variant=\"body1\">\n            {props.subtitle}\n          </Typography>\n        )}\n\n        {(props.children || props.descriptionTitle) && (\n          <CommentLikeBlock\n            className={classes.description}\n            title={props.descriptionTitle}\n          >\n            {props.children}\n          </CommentLikeBlock>\n        )}\n      </TimelineContent>\n    </MuiTimelineItem>\n  );\n};\n\nexport const TimelineItem = React.memo(TimelineItemBase);\n","import { Typography } from \"@material-ui/core\";\nimport {\n  TimelineItem,\n  TimelineContent,\n  TimelineSeparator,\n  TimelineDot,\n} from \"@material-ui/lab\";\nimport React from \"react\";\nimport clsx from \"clsx\";\n\nimport { useStyles } from \"./TimelineItem.styles\";\n\nexport interface InitialItemProps {\n  children?: React.ReactNode;\n  classes?: ClassesOverride<typeof useStyles>;\n  className?: string;\n}\n\nconst InitialItemBase: React.FC<InitialItemProps> = (props) => {\n  const classes = useStyles(props);\n  return (\n    <TimelineItem\n      className={clsx(\n        classes.timelineItem,\n        classes.initialItem,\n        props.className\n      )}\n    >\n      <TimelineSeparator>\n        <TimelineDot className={classes.dot} />\n      </TimelineSeparator>\n      <TimelineContent className={classes.content}>\n        <Typography className={classes.title} variant=\"h6\">\n          {props.children}\n        </Typography>\n      </TimelineContent>\n    </TimelineItem>\n  );\n};\n\nexport const InitialItem = React.memo(InitialItemBase);\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    timeline: {\n      padding: theme.spacing(0, 2, 0, 3),\n      [theme.breakpoints.down(\"sm\")]: {\n        paddingLeft: theme.spacing(2),\n      },\n    },\n  })\n);\n","import { Timeline as MuiTimeline } from \"@material-ui/lab\";\nimport React from \"react\";\nimport clsx from \"clsx\";\n\nimport { useStyles } from \"./Timeline.styles\";\n\nexport interface TimelineProps {\n  children: React.ReactNode;\n  className?: string;\n  variant?: \"primary\" | \"secondary\";\n  color?: \"main\" | \"light\";\n}\n\nconst TimelineBase: React.FC<TimelineProps> = (props) => {\n  const classes = useStyles();\n  return (\n    <MuiTimeline\n      className={clsx(\n        classes.timeline,\n        `az-timeline-${props.variant || \"primary\"}-${props.color || \"main\"}`,\n        props.className\n      )}\n    >\n      {props.children}\n    </MuiTimeline>\n  );\n};\n\nexport const Timeline = React.memo(TimelineBase);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nvar Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisible = _useIsFocusVisible.isFocusVisible,\n      onBlurVisible = _useIsFocusVisible.onBlurVisible,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState = React.useState(false),\n      focusVisible = _React$useState[0],\n      setFocusVisible = _React$useState[1];\n\n  var handlerRef = useForkRef(ref, focusVisibleRef);\n\n  var handleBlur = function handleBlur(event) {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[\"underline\".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\"\n}), 'OpenInNew');","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    linkOpen: {\n      whiteSpace: \"nowrap\",\n      color: theme.palette.primary.main,\n      \"&:hover\": {\n        color: theme.palette.primary.light,\n      },\n      \"& > *\": {\n        fontSize: \"inherit\",\n        display: \"inline-block\",\n        verticalAlign: \"bottom\",\n      },\n      \"& svg\": {\n        position: \"relative\",\n      },\n    },\n    icon: {\n      marginLeft: \"0.5em\",\n    },\n  })\n);\n","import { Link as MuiLink } from \"@material-ui/core\";\nimport { OpenInNew as OpenInNewIcon } from \"@material-ui/icons\";\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport { Link } from \"react-router-dom\";\n\nimport { useStyles } from \"./LinkOpen.styles\";\n\nexport interface LinkOpenProps {\n  className?: string;\n  to: string;\n  external?: boolean;\n  hasLinkIcon?: boolean;\n}\n\nexport const LinkOpen: React.FC<LinkOpenProps> = (props) => {\n  const classes = useStyles();\n  const className = clsx(classes.linkOpen, props.className);\n\n  const content = (\n    <>\n      <span>{props.children}</span>\n      {props.hasLinkIcon && <OpenInNewIcon className={classes.icon} />}\n    </>\n  );\n\n  return props.external ? (\n    <MuiLink\n      className={className}\n      href={props.to}\n      target=\"_blank\"\n      rel=\"external nofollow\"\n    >\n      {content}\n    </MuiLink>\n  ) : (\n    <Link className={className} to={props.to}>\n      {content}\n    </Link>\n  );\n};\n","import React from \"react\";\n\nimport { Experience } from \"~/config/experience\";\nimport { LinkOpen } from \"~/components/LinkOpen\";\nimport { TimelineItem } from \"~/components/Timeline\";\n\nexport interface ExperienceTimelineItemProps extends Experience {}\n\nconst ExperienceTimelineItemBase: React.FC<ExperienceTimelineItemProps> = (\n  props\n) => {\n  const title = props.company.link ? (\n    <LinkOpen to={props.company.link} hasLinkIcon external>\n      {props.company.name}\n    </LinkOpen>\n  ) : (\n    props.company.name\n  );\n\n  return (\n    <TimelineItem\n      title={title}\n      subtitle={props.position}\n      dateFrom={props.dateFrom}\n      dateTo={props.dateTo}\n      descriptionTitle={props.company.link ? \"About the company\" : \"About\"}\n    >\n      {props.company.description}\n    </TimelineItem>\n  );\n};\n\nexport const ExperienceTimelineItem = React.memo(ExperienceTimelineItemBase);\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    timeline: {\n      margin: 0,\n    },\n  })\n);\n","import React from \"react\";\n\nimport { EXPERIENCE } from \"~/config/experience\";\nimport { Timeline, InitialItem } from \"~/components/Timeline\";\n\nimport { ExperienceTimelineItem } from \"./ExperienceTimelineItem\";\n\nimport { useStyles } from \"./Experience.styles\";\n\nexport const Experience: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <Timeline className={classes.timeline} variant=\"secondary\" color=\"main\">\n      {EXPERIENCE.map((exp) => (\n        <ExperienceTimelineItem key={exp.id} {...exp} />\n      ))}\n      <InitialItem>Initial commit</InitialItem>\n    </Timeline>\n  );\n};\n\nexport default Experience;\n"],"sourceRoot":""}