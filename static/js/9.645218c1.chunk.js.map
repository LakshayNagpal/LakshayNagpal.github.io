{"version":3,"sources":["utils/date.ts","routes/Projects/SkillSeparator.tsx","routes/Projects/SkillGap.tsx","routes/Projects/Projects.styles.ts","routes/Projects/SelectedSkill.tsx","routes/Projects/Projects.tsx"],"names":["formatIntervalShort","start","end","format","duration","intervalToDuration","formatDuration","formatInterval","replace","formatMonthsAsIntervalShort","months","Date","addMonths","SkillSeparator","repeat","MAX_SKILL_NAME_LENGTH","SkillGap","props","name","gap","length","useStyles","makeStyles","theme","createStyles","projects","width","line","maxWidth","skillTableWrapper","overflowX","skillTable","minWidth","selectedSkill","color","palette","text","primary","skillIcon","height","display","marginBottom","SelectedSkill","React","memo","classes","skill","SKILLS_MAP","skillId","Icon","icon","monthsOfExperience","ExperienceWrapper","Kw","Fn","Sl","Fragment","handleClick","useCallback","onClick","className","clsx","hover","Projects","useSkillsContext","selectedSkills","selectedSkillsExperience","selectAllSkills","unselectSkill","sortedSkills","useMemo","sort","s1","s2","SKILLS","indexOf","CodeLikeBlock","map","key"],"mappings":"0IAAA,mGAeaA,EAAsB,SAAC,GAOlC,OApB4B,SAAC,GAQxB,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,IAMI,IALJC,cAKI,MALK,CAAC,QAAS,UAKf,EACEC,EAAWC,YAAmB,CAAEJ,QAAOC,QAC7C,OAAOI,YAAeF,EAAU,CAAED,WAU3BI,CAAe,CAAEN,MADpB,EALJA,MAM+BC,IAD3B,EAJJA,MAMGM,QAAQ,OAAQ,MAChBA,QAAQ,QAAS,OAGTC,EAA8B,SAACC,GAC1C,OAAOV,EAAoB,CACzBC,MAAO,IAAIU,KAAK,GAChBT,IAAKU,YAAU,IAAID,KAAK,GAAID,O,qICzBnBG,EAA2B,kBACtC,kBAAC,IAAD,KAAI,UAAUC,QAAQC,IAAwB,IAAM,KCGzCC,EAAoC,SAACC,GAAD,OAC/C,oCACGA,EAAMC,KACN,OAASJ,OACRC,IAAwB,GAAKE,EAAME,KAAO,GAAKF,EAAMC,KAAKE,U,kCCXnDC,EAAYC,aAAW,SAACC,GAAD,OAClCC,YAAa,CACXC,SAAU,CACRC,MAAO,QAETC,KAAM,CACJC,SAAU,QAEZC,kBAAmB,CACjBC,UAAW,OACXJ,MAAO,QAETK,WAAY,CACVL,MAAO,OACPM,SAAU,SAEZC,cAAe,CACbC,MAAOX,EAAMY,QAAQC,KAAKC,SAE5BC,UAAW,CACTZ,MAAO,QACPa,OAAQ,QACRC,QAAS,SACTC,aAAc,gBC6BPC,EAAgBC,IAAMC,MArCqB,SAAC3B,GACvD,IAAM4B,EAAUxB,IACVyB,EAAQC,IAAW9B,EAAM+B,SACzBC,EAAOH,EAAMI,KACXC,EAAuBlC,EAAvBkC,mBAEFC,EACJD,EAAqB,EACjBA,GAAsB,GACpBA,GAAsB,GACpBE,IACAC,IACFC,IACFZ,IAAMa,SAENC,EAAcC,uBAAY,kCAAMzC,EAAM0C,eAAZ,aAAM,OAAA1C,EAAgBA,EAAM+B,WAAU,CACpE/B,EAAM+B,QACN/B,EAAM0C,UAGR,OACE,kBAAC,IAAD,CACEC,UAAWC,YAAKhB,EAAQZ,cAAehB,EAAM2C,WAC7CD,QAASF,EACTK,OAAK,GAEL,kBAACb,EAAD,CAAMW,UAAWf,EAAQP,YAL3B,IAKyC,kBAAC,EAAD,CAAUpB,KAAM4B,EAAM5B,OAL/D,IAMGiC,GAAsB,KAA8B,IAAvBA,EAC1B,IACA,OAASrC,OAAO,GACpB,kBAACsC,EAAD,KACG3C,YAA4B0C,IAAuB,sBCrC/CY,EAAqB,WAChC,IAAMlB,EAAUxB,IADsB,EAOlC2C,cAJFC,EAHoC,EAGpCA,eACAC,EAJoC,EAIpCA,yBACAC,EALoC,EAKpCA,gBACAC,EANoC,EAMpCA,cAGIC,EAAeC,mBACnB,kBACE,YAAIL,GAAgBM,MAClB,SAACC,EAAIC,GAAL,OACEP,EAAyBO,GAAMP,EAAyBM,IACxDE,IAAOC,QAAQ5B,IAAWyB,IAAOE,IAAOC,QAAQ5B,IAAW0B,SAEjE,CAACR,IAGH,OACE,kBAACW,EAAA,EAAD,CAAehB,UAAWf,EAAQpB,UAChC,kBAAC,IAAD,CAAGmC,UAAWf,EAAQlB,MAAtB,0IAKA,kBAAC,IAAD,OAEEsC,EAAe7C,QACf,kBAAC,IAAD,CAAGwC,UAAWf,EAAQlB,MAAtB,eACc,kBAAC,IAAD,eADd,cACwC,kBAAC,IAAD,kBADxC,eAKF,kBAAC,IAAD,CAAGmC,OAAK,EAACH,QAASQ,GAChB,kBAAC,IAAD,6BAECF,EAAe7C,QAAU,kBAAC,IAAD,QAEzB6C,EAAe7C,QAChB,yBAAKwC,UAAWf,EAAQhB,mBACtB,yBAAK+B,UAAWf,EAAQd,YACtB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAUb,KAAK,kBAAkBC,IAAK,IADxC,iBAGA,kBAAC,EAAD,MAECkD,EAAaQ,KAAI,SAAC7B,GAAD,OAChB,kBAACN,EAAD,CACEoC,IAAK9B,EACLA,QAASA,EACTG,mBAAoBe,EAAyBlB,GAC7CW,QAASS,WAUVL","file":"static/js/9.645218c1.chunk.js","sourcesContent":["import { formatDuration, intervalToDuration, addMonths } from \"date-fns\";\n\nexport const formatInterval = ({\n  start,\n  end,\n  format = [\"years\", \"months\"],\n}: {\n  start: Date;\n  end: Date;\n  format?: string[];\n}) => {\n  const duration = intervalToDuration({ start, end });\n  return formatDuration(duration, { format });\n};\n\nexport const formatIntervalShort = ({\n  start,\n  end,\n}: {\n  start: Date;\n  end: Date;\n}) => {\n  return formatInterval({ start, end })\n    .replace(\"year\", \"yr\")\n    .replace(\"month\", \"mo\");\n};\n\nexport const formatMonthsAsIntervalShort = (months: number) => {\n  return formatIntervalShort({\n    start: new Date(0),\n    end: addMonths(new Date(0), months),\n  });\n};\n","import React from \"react\";\n\nimport { MAX_SKILL_NAME_LENGTH } from \"~/config/skills\";\nimport { L } from \"~/components/CodeLikeBlock\";\n\nexport const SkillSeparator: React.FC = () => (\n  <L>{\"\\u2014 \".repeat((MAX_SKILL_NAME_LENGTH + 22) / 2)}</L>\n);\n","import React from \"react\";\n\nimport { MAX_SKILL_NAME_LENGTH } from \"~/config/skills\";\n\nexport interface SkillGapProps {\n  name: string;\n  gap?: number;\n}\n\nexport const SkillGap: React.FC<SkillGapProps> = (props) => (\n  <>\n    {props.name}\n    {\"\\u00A0\".repeat(\n      MAX_SKILL_NAME_LENGTH + 1 + (props.gap || 0) - props.name.length\n    )}\n  </>\n);\n","import { createStyles, makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) =>\n  createStyles({\n    projects: {\n      width: \"100%\",\n    },\n    line: {\n      maxWidth: \"42em\",\n    },\n    skillTableWrapper: {\n      overflowX: \"auto\",\n      width: \"100%\",\n    },\n    skillTable: {\n      width: \"100%\",\n      minWidth: \"440px\",\n    },\n    selectedSkill: {\n      color: theme.palette.text.primary,\n    },\n    skillIcon: {\n      width: \"1.2em\",\n      height: \"1.2em\",\n      display: \"inline\",\n      marginBottom: \"-0.25em\",\n    },\n  })\n);\n","import React, { useCallback } from \"react\";\nimport clsx from \"clsx\";\n\nimport { SKILLS_MAP, SkillId } from \"~/config/skills\";\nimport { L, Sl, Fn, Kw } from \"~/components/CodeLikeBlock\";\nimport { formatMonthsAsIntervalShort } from \"~/utils/date\";\n\nimport { SkillGap } from \"./SkillGap\";\nimport { useStyles } from \"./Projects.styles\";\n\nexport interface SelectedSkillProps {\n  className?: string;\n  skillId: SkillId;\n  monthsOfExperience: number;\n  onClick?: (skillId: SkillId) => void;\n}\n\nconst SelectedSkillBase: React.FC<SelectedSkillProps> = (props) => {\n  const classes = useStyles();\n  const skill = SKILLS_MAP[props.skillId];\n  const Icon = skill.icon;\n  const { monthsOfExperience } = props;\n\n  const ExperienceWrapper =\n    monthsOfExperience > 6\n      ? monthsOfExperience >= 24\n        ? monthsOfExperience >= 36\n          ? Kw\n          : Fn\n        : Sl\n      : React.Fragment;\n\n  const handleClick = useCallback(() => props.onClick?.(props.skillId), [\n    props.skillId,\n    props.onClick,\n  ]);\n\n  return (\n    <L\n      className={clsx(classes.selectedSkill, props.className)}\n      onClick={handleClick}\n      hover\n    >\n      <Icon className={classes.skillIcon} /> <SkillGap name={skill.name} />|\n      {monthsOfExperience >= 120 || monthsOfExperience === 0\n        ? \" \"\n        : \"\\u00A0\".repeat(2)}\n      <ExperienceWrapper>\n        {formatMonthsAsIntervalShort(monthsOfExperience) || \"non-commercial\"}\n      </ExperienceWrapper>\n    </L>\n  );\n};\n\nexport const SelectedSkill = React.memo(SelectedSkillBase);\n","import React, { useMemo } from \"react\";\n\nimport { SKILLS, SKILLS_MAP } from \"~/config/skills\";\nimport { CodeLikeBlock, L, Br, Sl, Fn, Kw } from \"~/components/CodeLikeBlock\";\nimport { useSkillsContext } from \"~/components/SkillsProvider\";\n\nimport { SkillSeparator } from \"./SkillSeparator\";\nimport { SkillGap } from \"./SkillGap\";\nimport { SelectedSkill } from \"./SelectedSkill\";\nimport { useStyles } from \"./Projects.styles\";\n\nexport const Projects: React.FC = () => {\n  const classes = useStyles();\n  const {\n    selectedSkills,\n    selectedSkillsExperience,\n    selectAllSkills,\n    unselectSkill,\n  } = useSkillsContext();\n\n  const sortedSkills = useMemo(\n    () =>\n      [...selectedSkills].sort(\n        (s1, s2) =>\n          selectedSkillsExperience[s2] - selectedSkillsExperience[s1] ||\n          SKILLS.indexOf(SKILLS_MAP[s1]) - SKILLS.indexOf(SKILLS_MAP[s2])\n      ),\n    [selectedSkills]\n  );\n\n  return (\n    <CodeLikeBlock className={classes.projects}>\n      <L className={classes.line}>\n        I would like to show you projects in which selected skills were used,\n        but unfortunately I'm not allowed to do this because of NDA-s :(\n      </L>\n\n      <Br />\n\n      {!selectedSkills.length && (\n        <L className={classes.line}>\n          Select some <Sl>skills</Sl> to see my <Fn>expertise</Fn> in them...\n        </L>\n      )}\n\n      <L hover onClick={selectAllSkills}>\n        <Kw>Select All Skills</Kw>\n      </L>\n      {!!selectedSkills.length && <Br />}\n\n      {!!selectedSkills.length && (\n        <div className={classes.skillTableWrapper}>\n          <div className={classes.skillTable}>\n            <L>\n              <SkillGap name=\"Selected skills\" gap={3} />| ~Experience\n            </L>\n            <SkillSeparator />\n\n            {sortedSkills.map((skillId) => (\n              <SelectedSkill\n                key={skillId}\n                skillId={skillId}\n                monthsOfExperience={selectedSkillsExperience[skillId]}\n                onClick={unselectSkill}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </CodeLikeBlock>\n  );\n};\n\nexport default Projects;\n"],"sourceRoot":""}